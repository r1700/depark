{"version":3,"file":"main.js","mappings":"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","sources":["webpack://@depark/frontend/./node_modules/workbox-core/_private/Deferred.js","webpack://@depark/frontend/./node_modules/workbox-core/_private/WorkboxError.js","webpack://@depark/frontend/./node_modules/workbox-core/_private/assert.js","webpack://@depark/frontend/./node_modules/workbox-core/_private/cacheMatchIgnoreParams.js","webpack://@depark/frontend/./node_modules/workbox-core/_private/cacheNames.js","webpack://@depark/frontend/./node_modules/workbox-core/_private/canConstructResponseFromBodyStream.js","webpack://@depark/frontend/./node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js","webpack://@depark/frontend/./node_modules/workbox-core/_private/getFriendlyURL.js","webpack://@depark/frontend/./node_modules/workbox-core/_private/logger.js","webpack://@depark/frontend/./node_modules/workbox-core/_private/timeout.js","webpack://@depark/frontend/./node_modules/workbox-core/_private/waitUntil.js","webpack://@depark/frontend/./node_modules/workbox-core/_version.js","webpack://@depark/frontend/./node_modules/workbox-core/copyResponse.js","webpack://@depark/frontend/./node_modules/workbox-core/models/messages/messageGenerator.js","webpack://@depark/frontend/./node_modules/workbox-core/models/messages/messages.js","webpack://@depark/frontend/./node_modules/workbox-core/models/quotaErrorCallbacks.js","webpack://@depark/frontend/./node_modules/workbox-precaching/PrecacheController.js","webpack://@depark/frontend/./node_modules/workbox-precaching/PrecacheFallbackPlugin.js","webpack://@depark/frontend/./node_modules/workbox-precaching/PrecacheRoute.js","webpack://@depark/frontend/./node_modules/workbox-precaching/PrecacheStrategy.js","webpack://@depark/frontend/./node_modules/workbox-precaching/_version.js","webpack://@depark/frontend/./node_modules/workbox-precaching/addPlugins.js","webpack://@depark/frontend/./node_modules/workbox-precaching/addRoute.js","webpack://@depark/frontend/./node_modules/workbox-precaching/cleanupOutdatedCaches.js","webpack://@depark/frontend/./node_modules/workbox-precaching/createHandlerBoundToURL.js","webpack://@depark/frontend/./node_modules/workbox-precaching/getCacheKeyForURL.js","webpack://@depark/frontend/./node_modules/workbox-precaching/matchPrecache.js","webpack://@depark/frontend/./node_modules/workbox-precaching/precache.js","webpack://@depark/frontend/./node_modules/workbox-precaching/precacheAndRoute.js","webpack://@depark/frontend/./node_modules/workbox-precaching/utils/PrecacheCacheKeyPlugin.js","webpack://@depark/frontend/./node_modules/workbox-precaching/utils/PrecacheInstallReportPlugin.js","webpack://@depark/frontend/./node_modules/workbox-precaching/utils/createCacheKey.js","webpack://@depark/frontend/./node_modules/workbox-precaching/utils/deleteOutdatedCaches.js","webpack://@depark/frontend/./node_modules/workbox-precaching/utils/generateURLVariations.js","webpack://@depark/frontend/./node_modules/workbox-precaching/utils/getOrCreatePrecacheController.js","webpack://@depark/frontend/./node_modules/workbox-precaching/utils/printCleanupDetails.js","webpack://@depark/frontend/./node_modules/workbox-precaching/utils/printInstallDetails.js","webpack://@depark/frontend/./node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js","webpack://@depark/frontend/./node_modules/workbox-routing/RegExpRoute.js","webpack://@depark/frontend/./node_modules/workbox-routing/Route.js","webpack://@depark/frontend/./node_modules/workbox-routing/Router.js","webpack://@depark/frontend/./node_modules/workbox-routing/_version.js","webpack://@depark/frontend/./node_modules/workbox-routing/registerRoute.js","webpack://@depark/frontend/./node_modules/workbox-routing/utils/constants.js","webpack://@depark/frontend/./node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js","webpack://@depark/frontend/./node_modules/workbox-routing/utils/normalizeHandler.js","webpack://@depark/frontend/./node_modules/workbox-strategies/Strategy.js","webpack://@depark/frontend/./node_modules/workbox-strategies/StrategyHandler.js","webpack://@depark/frontend/./node_modules/workbox-strategies/_version.js","webpack://@depark/frontend/webpack/bootstrap","webpack://@depark/frontend/webpack/runtime/compat get default export","webpack://@depark/frontend/webpack/runtime/define property getters","webpack://@depark/frontend/webpack/runtime/hasOwnProperty shorthand","webpack://@depark/frontend/webpack/runtime/make namespace object","webpack://@depark/frontend/./src/service-worker.ts"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nclass Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexport { Deferred };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\nimport '../_version.js';\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */\n    constructor(errorCode, details) {\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\nexport { WorkboxError };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from '../_private/WorkboxError.js';\nimport '../_version.js';\n/*\n * This method throws if the supplied value is not an array.\n * The destructed values are required to produce a meaningful error for users.\n * The destructed and restructured object is so it's clear what is\n * needed.\n */\nconst isArray = (value, details) => {\n    if (!Array.isArray(value)) {\n        throw new WorkboxError('not-an-array', details);\n    }\n};\nconst hasMethod = (object, expectedMethod, details) => {\n    const type = typeof object[expectedMethod];\n    if (type !== 'function') {\n        details['expectedMethod'] = expectedMethod;\n        throw new WorkboxError('missing-a-method', details);\n    }\n};\nconst isType = (object, expectedType, details) => {\n    if (typeof object !== expectedType) {\n        details['expectedType'] = expectedType;\n        throw new WorkboxError('incorrect-type', details);\n    }\n};\nconst isInstance = (object, \n// Need the general type to do the check later.\n// eslint-disable-next-line @typescript-eslint/ban-types\nexpectedClass, details) => {\n    if (!(object instanceof expectedClass)) {\n        details['expectedClassName'] = expectedClass.name;\n        throw new WorkboxError('incorrect-class', details);\n    }\n};\nconst isOneOf = (value, validValues, details) => {\n    if (!validValues.includes(value)) {\n        details['validValueDescription'] = `Valid values are ${JSON.stringify(validValues)}.`;\n        throw new WorkboxError('invalid-value', details);\n    }\n};\nconst isArrayOfClass = (value, \n// Need general type to do check later.\nexpectedClass, // eslint-disable-line\ndetails) => {\n    const error = new WorkboxError('not-array-of-class', details);\n    if (!Array.isArray(value)) {\n        throw error;\n    }\n    for (const item of value) {\n        if (!(item instanceof expectedClass)) {\n            throw error;\n        }\n    }\n};\nconst finalAssertExports = process.env.NODE_ENV === 'production'\n    ? null\n    : {\n        hasMethod,\n        isArray,\n        isInstance,\n        isOneOf,\n        isType,\n        isArrayOfClass,\n    };\nexport { finalAssertExports as assert };\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams) {\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    // Otherwise, match by comparing keys\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), { ignoreSearch: true });\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys) {\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\nexport { cacheMatchIgnoreParams };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\n};\nconst _createCacheName = (cacheName) => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n        .filter((value) => value && value.length > 0)\n        .join('-');\n};\nconst eachCacheNameDetail = (fn) => {\n    for (const key of Object.keys(_cacheNameDetails)) {\n        fn(key);\n    }\n};\nexport const cacheNames = {\n    updateDetails: (details) => {\n        eachCacheNameDetail((key) => {\n            if (typeof details[key] === 'string') {\n                _cacheNameDetails[key] = details[key];\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n        return _cacheNameDetails.suffix;\n    },\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nlet supportStatus;\n/**\n * A utility function that determines whether the current browser supports\n * constructing a new `Response` from a `response.body` stream.\n *\n * @return {boolean} `true`, if the current browser can successfully\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\n *\n * @private\n */\nfunction canConstructResponseFromBodyStream() {\n    if (supportStatus === undefined) {\n        const testResponse = new Response('');\n        if ('body' in testResponse) {\n            try {\n                new Response(testResponse.body);\n                supportStatus = true;\n            }\n            catch (error) {\n                supportStatus = false;\n            }\n        }\n        supportStatus = false;\n    }\n    return supportStatus;\n}\nexport { canConstructResponseFromBodyStream };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from '../_private/logger.js';\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\nimport '../_version.js';\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof workbox-core\n * @private\n */\nasync function executeQuotaErrorCallbacks() {\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\n            `callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks) {\n        await callback();\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(callback, 'is complete.');\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Finished running callbacks.');\n    }\n}\nexport { executeQuotaErrorCallbacks };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst getFriendlyURL = (url) => {\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\n};\nexport { getFriendlyURL };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst logger = (process.env.NODE_ENV === 'production'\n    ? null\n    : (() => {\n        // Don't overwrite this value if it's already set.\n        // See https://github.com/GoogleChrome/workbox/pull/2284#issuecomment-560470923\n        if (!('__WB_DISABLE_DEV_LOGS' in globalThis)) {\n            self.__WB_DISABLE_DEV_LOGS = false;\n        }\n        let inGroup = false;\n        const methodToColorMap = {\n            debug: `#7f8c8d`,\n            log: `#2ecc71`,\n            warn: `#f39c12`,\n            error: `#c0392b`,\n            groupCollapsed: `#3498db`,\n            groupEnd: null, // No colored prefix on groupEnd\n        };\n        const print = function (method, args) {\n            if (self.__WB_DISABLE_DEV_LOGS) {\n                return;\n            }\n            if (method === 'groupCollapsed') {\n                // Safari doesn't print all console.groupCollapsed() arguments:\n                // https://bugs.webkit.org/show_bug.cgi?id=182754\n                if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n                    console[method](...args);\n                    return;\n                }\n            }\n            const styles = [\n                `background: ${methodToColorMap[method]}`,\n                `border-radius: 0.5em`,\n                `color: white`,\n                `font-weight: bold`,\n                `padding: 2px 0.5em`,\n            ];\n            // When in a group, the workbox prefix is not displayed.\n            const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\n            console[method](...logPrefix, ...args);\n            if (method === 'groupCollapsed') {\n                inGroup = true;\n            }\n            if (method === 'groupEnd') {\n                inGroup = false;\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        const api = {};\n        const loggerMethods = Object.keys(methodToColorMap);\n        for (const key of loggerMethods) {\n            const method = key;\n            api[method] = (...args) => {\n                print(method, args);\n            };\n        }\n        return api;\n    })());\nexport { logger };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Returns a promise that resolves and the passed number of milliseconds.\n * This utility is an async/await-friendly version of `setTimeout`.\n *\n * @param {number} ms\n * @return {Promise}\n * @private\n */\nexport function timeout(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A utility method that makes it easier to use `event.waitUntil` with\n * async functions and return the result.\n *\n * @param {ExtendableEvent} event\n * @param {Function} asyncFn\n * @return {Function}\n * @private\n */\nfunction waitUntil(event, asyncFn) {\n    const returnPromise = asyncFn();\n    event.waitUntil(returnPromise);\n    return returnPromise;\n}\nexport { waitUntil };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:6.5.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport { WorkboxError } from './_private/WorkboxError.js';\nimport './_version.js';\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * This method is intentionally limited to same-origin responses, regardless of\n * whether CORS was used or not.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof workbox-core\n */\nasync function copyResponse(response, modifier) {\n    let origin = null;\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\n    if (response.url) {\n        const responseURL = new URL(response.url);\n        origin = responseURL.origin;\n    }\n    if (origin !== self.location.origin) {\n        throw new WorkboxError('cross-origin-copy-response', { origin });\n    }\n    const clonedResponse = response.clone();\n    // Create a fresh `ResponseInit` object by cloning the headers.\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText,\n    };\n    // Apply any user modifications.\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    // Create the new response from the body stream and `ResponseInit`\n    // modifications. Note: not all browsers support the Response.body stream,\n    // so fall back to reading the entire body into memory as a blob.\n    const body = canConstructResponseFromBodyStream()\n        ? clonedResponse.body\n        : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n}\nexport { copyResponse };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messages } from './messages.js';\nimport '../../_version.js';\nconst fallback = (code, ...args) => {\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {}) => {\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nexport const messageGenerator = process.env.NODE_ENV === 'production' ? fallback : generatorFunction;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../../_version.js';\nexport const messages = {\n    'invalid-value': ({ paramName, validValueDescription, value }) => {\n        if (!paramName || !validValueDescription) {\n            throw new Error(`Unexpected input to 'invalid-value' error.`);\n        }\n        return (`The '${paramName}' parameter was given a value with an ` +\n            `unexpected value. ${validValueDescription} Received a value of ` +\n            `${JSON.stringify(value)}.`);\n    },\n    'not-an-array': ({ moduleName, className, funcName, paramName }) => {\n        if (!moduleName || !className || !funcName || !paramName) {\n            throw new Error(`Unexpected input to 'not-an-array' error.`);\n        }\n        return (`The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${className}.${funcName}()' must be an array.`);\n    },\n    'incorrect-type': ({ expectedType, paramName, moduleName, className, funcName, }) => {\n        if (!expectedType || !paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-type' error.`);\n        }\n        const classNameStr = className ? `${className}.` : '';\n        return (`The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${classNameStr}` +\n            `${funcName}()' must be of type ${expectedType}.`);\n    },\n    'incorrect-class': ({ expectedClassName, paramName, moduleName, className, funcName, isReturnValueProblem, }) => {\n        if (!expectedClassName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-class' error.`);\n        }\n        const classNameStr = className ? `${className}.` : '';\n        if (isReturnValueProblem) {\n            return (`The return value from ` +\n                `'${moduleName}.${classNameStr}${funcName}()' ` +\n                `must be an instance of class ${expectedClassName}.`);\n        }\n        return (`The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${classNameStr}${funcName}()' ` +\n            `must be an instance of class ${expectedClassName}.`);\n    },\n    'missing-a-method': ({ expectedMethod, paramName, moduleName, className, funcName, }) => {\n        if (!expectedMethod ||\n            !paramName ||\n            !moduleName ||\n            !className ||\n            !funcName) {\n            throw new Error(`Unexpected input to 'missing-a-method' error.`);\n        }\n        return (`${moduleName}.${className}.${funcName}() expected the ` +\n            `'${paramName}' parameter to expose a '${expectedMethod}' method.`);\n    },\n    'add-to-cache-list-unexpected-type': ({ entry }) => {\n        return (`An unexpected entry was passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' The entry ` +\n            `'${JSON.stringify(entry)}' isn't supported. You must supply an array of ` +\n            `strings with one or more characters, objects with a url property or ` +\n            `Request objects.`);\n    },\n    'add-to-cache-list-conflicting-entries': ({ firstEntry, secondEntry }) => {\n        if (!firstEntry || !secondEntry) {\n            throw new Error(`Unexpected input to ` + `'add-to-cache-list-duplicate-entries' error.`);\n        }\n        return (`Two of the entries passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` +\n            `${firstEntry} but different revision details. Workbox is ` +\n            `unable to cache and version the asset correctly. Please remove one ` +\n            `of the entries.`);\n    },\n    'plugin-error-request-will-fetch': ({ thrownErrorMessage }) => {\n        if (!thrownErrorMessage) {\n            throw new Error(`Unexpected input to ` + `'plugin-error-request-will-fetch', error.`);\n        }\n        return (`An error was thrown by a plugins 'requestWillFetch()' method. ` +\n            `The thrown error message was: '${thrownErrorMessage}'.`);\n    },\n    'invalid-cache-name': ({ cacheNameId, value }) => {\n        if (!cacheNameId) {\n            throw new Error(`Expected a 'cacheNameId' for error 'invalid-cache-name'`);\n        }\n        return (`You must provide a name containing at least one character for ` +\n            `setCacheDetails({${cacheNameId}: '...'}). Received a value of ` +\n            `'${JSON.stringify(value)}'`);\n    },\n    'unregister-route-but-not-found-with-method': ({ method }) => {\n        if (!method) {\n            throw new Error(`Unexpected input to ` +\n                `'unregister-route-but-not-found-with-method' error.`);\n        }\n        return (`The route you're trying to unregister was not  previously ` +\n            `registered for the method type '${method}'.`);\n    },\n    'unregister-route-route-not-registered': () => {\n        return (`The route you're trying to unregister was not previously ` +\n            `registered.`);\n    },\n    'queue-replay-failed': ({ name }) => {\n        return `Replaying the background sync queue '${name}' failed.`;\n    },\n    'duplicate-queue-name': ({ name }) => {\n        return (`The Queue name '${name}' is already being used. ` +\n            `All instances of backgroundSync.Queue must be given unique names.`);\n    },\n    'expired-test-without-max-age': ({ methodName, paramName }) => {\n        return (`The '${methodName}()' method can only be used when the ` +\n            `'${paramName}' is used in the constructor.`);\n    },\n    'unsupported-route-type': ({ moduleName, className, funcName, paramName }) => {\n        return (`The supplied '${paramName}' parameter was an unsupported type. ` +\n            `Please check the docs for ${moduleName}.${className}.${funcName} for ` +\n            `valid input types.`);\n    },\n    'not-array-of-class': ({ value, expectedClass, moduleName, className, funcName, paramName, }) => {\n        return (`The supplied '${paramName}' parameter must be an array of ` +\n            `'${expectedClass}' objects. Received '${JSON.stringify(value)},'. ` +\n            `Please check the call to ${moduleName}.${className}.${funcName}() ` +\n            `to fix the issue.`);\n    },\n    'max-entries-or-age-required': ({ moduleName, className, funcName }) => {\n        return (`You must define either config.maxEntries or config.maxAgeSeconds` +\n            `in ${moduleName}.${className}.${funcName}`);\n    },\n    'statuses-or-headers-required': ({ moduleName, className, funcName }) => {\n        return (`You must define either config.statuses or config.headers` +\n            `in ${moduleName}.${className}.${funcName}`);\n    },\n    'invalid-string': ({ moduleName, funcName, paramName }) => {\n        if (!paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'invalid-string' error.`);\n        }\n        return (`When using strings, the '${paramName}' parameter must start with ` +\n            `'http' (for cross-origin matches) or '/' (for same-origin matches). ` +\n            `Please see the docs for ${moduleName}.${funcName}() for ` +\n            `more info.`);\n    },\n    'channel-name-required': () => {\n        return (`You must provide a channelName to construct a ` +\n            `BroadcastCacheUpdate instance.`);\n    },\n    'invalid-responses-are-same-args': () => {\n        return (`The arguments passed into responsesAreSame() appear to be ` +\n            `invalid. Please ensure valid Responses are used.`);\n    },\n    'expire-custom-caches-only': () => {\n        return (`You must provide a 'cacheName' property when using the ` +\n            `expiration plugin with a runtime caching strategy.`);\n    },\n    'unit-must-be-bytes': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'unit-must-be-bytes' error.`);\n        }\n        return (`The 'unit' portion of the Range header must be set to 'bytes'. ` +\n            `The Range header provided was \"${normalizedRangeHeader}\"`);\n    },\n    'single-range-only': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'single-range-only' error.`);\n        }\n        return (`Multiple ranges are not supported. Please use a  single start ` +\n            `value, and optional end value. The Range header provided was ` +\n            `\"${normalizedRangeHeader}\"`);\n    },\n    'invalid-range-values': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'invalid-range-values' error.`);\n        }\n        return (`The Range header is missing both start and end values. At least ` +\n            `one of those values is needed. The Range header provided was ` +\n            `\"${normalizedRangeHeader}\"`);\n    },\n    'no-range-header': () => {\n        return `No Range header was found in the Request provided.`;\n    },\n    'range-not-satisfiable': ({ size, start, end }) => {\n        return (`The start (${start}) and end (${end}) values in the Range are ` +\n            `not satisfiable by the cached response, which is ${size} bytes.`);\n    },\n    'attempt-to-cache-non-get-request': ({ url, method }) => {\n        return (`Unable to cache '${url}' because it is a '${method}' request and ` +\n            `only 'GET' requests can be cached.`);\n    },\n    'cache-put-with-no-response': ({ url }) => {\n        return (`There was an attempt to cache '${url}' but the response was not ` +\n            `defined.`);\n    },\n    'no-response': ({ url, error }) => {\n        let message = `The strategy could not generate a response for '${url}'.`;\n        if (error) {\n            message += ` The underlying error is ${error}.`;\n        }\n        return message;\n    },\n    'bad-precaching-response': ({ url, status }) => {\n        return (`The precaching request for '${url}' failed` +\n            (status ? ` with an HTTP status of ${status}.` : `.`));\n    },\n    'non-precached-url': ({ url }) => {\n        return (`createHandlerBoundToURL('${url}') was called, but that URL is ` +\n            `not precached. Please pass in a URL that is precached instead.`);\n    },\n    'add-to-cache-list-conflicting-integrities': ({ url }) => {\n        return (`Two of the entries passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` +\n            `${url} with different integrity values. Please remove one of them.`);\n    },\n    'missing-precache-entry': ({ cacheName, url }) => {\n        return `Unable to find a precached response in ${cacheName} for ${url}.`;\n    },\n    'cross-origin-copy-response': ({ origin }) => {\n        return (`workbox-core.copyResponse() can only be used with same-origin ` +\n            `responses. It was passed a response with origin ${origin}.`);\n    },\n    'opaque-streams-source': ({ type }) => {\n        const message = `One of the workbox-streams sources resulted in an ` +\n            `'${type}' response.`;\n        if (type === 'opaqueredirect') {\n            return (`${message} Please do not use a navigation request that results ` +\n                `in a redirect as a source.`);\n        }\n        return `${message} Please ensure your sources are CORS-enabled.`;\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n// Callbacks to be executed whenever there's a quota error.\n// Can't change Function type right now.\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst quotaErrorCallbacks = new Set();\nexport { quotaErrorCallbacks };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { waitUntil } from 'workbox-core/_private/waitUntil.js';\nimport { createCacheKey } from './utils/createCacheKey.js';\nimport { PrecacheInstallReportPlugin } from './utils/PrecacheInstallReportPlugin.js';\nimport { PrecacheCacheKeyPlugin } from './utils/PrecacheCacheKeyPlugin.js';\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\nimport { printInstallDetails } from './utils/printInstallDetails.js';\nimport { PrecacheStrategy } from './PrecacheStrategy.js';\nimport './_version.js';\n/**\n * Performs efficient precaching of assets.\n *\n * @memberof workbox-precaching\n */\nclass PrecacheController {\n    /**\n     * Create a new PrecacheController.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] The cache to use for precaching.\n     * @param {string} [options.plugins] Plugins to use when precaching as well\n     * as responding to fetch events for precached assets.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor({ cacheName, plugins = [], fallbackToNetwork = true, } = {}) {\n        this._urlsToCacheKeys = new Map();\n        this._urlsToCacheModes = new Map();\n        this._cacheKeysToIntegrities = new Map();\n        this._strategy = new PrecacheStrategy({\n            cacheName: cacheNames.getPrecacheName(cacheName),\n            plugins: [\n                ...plugins,\n                new PrecacheCacheKeyPlugin({ precacheController: this }),\n            ],\n            fallbackToNetwork,\n        });\n        // Bind the install and activate methods to the instance.\n        this.install = this.install.bind(this);\n        this.activate = this.activate.bind(this);\n    }\n    /**\n     * @type {workbox-precaching.PrecacheStrategy} The strategy created by this controller and\n     * used to cache assets and respond to fetch events.\n     */\n    get strategy() {\n        return this._strategy;\n    }\n    /**\n     * Adds items to the precache list, removing any duplicates and\n     * stores the files in the\n     * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n     * worker installs.\n     *\n     * This method can be called multiple times.\n     *\n     * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n     */\n    precache(entries) {\n        this.addToCacheList(entries);\n        if (!this._installAndActiveListenersAdded) {\n            self.addEventListener('install', this.install);\n            self.addEventListener('activate', this.activate);\n            this._installAndActiveListenersAdded = true;\n        }\n    }\n    /**\n     * This method will add items to the precache list, removing duplicates\n     * and ensuring the information is valid.\n     *\n     * @param {Array<workbox-precaching.PrecacheController.PrecacheEntry|string>} entries\n     *     Array of entries to precache.\n     */\n    addToCacheList(entries) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArray(entries, {\n                moduleName: 'workbox-precaching',\n                className: 'PrecacheController',\n                funcName: 'addToCacheList',\n                paramName: 'entries',\n            });\n        }\n        const urlsToWarnAbout = [];\n        for (const entry of entries) {\n            // See https://github.com/GoogleChrome/workbox/issues/2259\n            if (typeof entry === 'string') {\n                urlsToWarnAbout.push(entry);\n            }\n            else if (entry && entry.revision === undefined) {\n                urlsToWarnAbout.push(entry.url);\n            }\n            const { cacheKey, url } = createCacheKey(entry);\n            const cacheMode = typeof entry !== 'string' && entry.revision ? 'reload' : 'default';\n            if (this._urlsToCacheKeys.has(url) &&\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\n                    firstEntry: this._urlsToCacheKeys.get(url),\n                    secondEntry: cacheKey,\n                });\n            }\n            if (typeof entry !== 'string' && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\n                        url,\n                    });\n                }\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Workbox is precaching URLs without revision ` +\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\n                    `Learn more at https://bit.ly/wb-precache`;\n                if (process.env.NODE_ENV === 'production') {\n                    // Use console directly to display this warning without bloating\n                    // bundle sizes by pulling in all of the logger codebase in prod.\n                    console.warn(warningMessage);\n                }\n                else {\n                    logger.warn(warningMessage);\n                }\n            }\n        }\n    }\n    /**\n     * Precaches new and updated assets. Call this method from the service worker\n     * install event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.InstallResult>}\n     */\n    install(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const installReportPlugin = new PrecacheInstallReportPlugin();\n            this.strategy.plugins.push(installReportPlugin);\n            // Cache entries one at a time.\n            // See https://github.com/GoogleChrome/workbox/issues/2528\n            for (const [url, cacheKey] of this._urlsToCacheKeys) {\n                const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n                const cacheMode = this._urlsToCacheModes.get(url);\n                const request = new Request(url, {\n                    integrity,\n                    cache: cacheMode,\n                    credentials: 'same-origin',\n                });\n                await Promise.all(this.strategy.handleAll({\n                    params: { cacheKey },\n                    request,\n                    event,\n                }));\n            }\n            const { updatedURLs, notUpdatedURLs } = installReportPlugin;\n            if (process.env.NODE_ENV !== 'production') {\n                printInstallDetails(updatedURLs, notUpdatedURLs);\n            }\n            return { updatedURLs, notUpdatedURLs };\n        });\n    }\n    /**\n     * Deletes assets that are no longer present in the current precache manifest.\n     * Call this method from the service worker activate event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.CleanupResult>}\n     */\n    activate(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            const currentlyCachedRequests = await cache.keys();\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n            const deletedURLs = [];\n            for (const request of currentlyCachedRequests) {\n                if (!expectedCacheKeys.has(request.url)) {\n                    await cache.delete(request);\n                    deletedURLs.push(request.url);\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                printCleanupDetails(deletedURLs);\n            }\n            return { deletedURLs };\n        });\n    }\n    /**\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\n     * into account the revision information for the URL.\n     *\n     * @return {Map<string, string>} A URL to cache key mapping.\n     */\n    getURLsToCacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    /**\n     * Returns a list of all the URLs that have been precached by the current\n     * service worker.\n     *\n     * @return {Array<string>} The precached URLs.\n     */\n    getCachedURLs() {\n        return [...this._urlsToCacheKeys.keys()];\n    }\n    /**\n     * Returns the cache key used for storing a given URL. If that URL is\n     * unversioned, like `/index.html', then the cache key will be the original\n     * URL with a search parameter appended to it.\n     *\n     * @param {string} url A URL whose cache key you want to look up.\n     * @return {string} The versioned URL that corresponds to a cache key\n     * for the original URL, or undefined if that URL isn't precached.\n     */\n    getCacheKeyForURL(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    /**\n     * @param {string} url A cache key whose SRI you want to look up.\n     * @return {string} The subresource integrity associated with the cache key,\n     * or undefined if it's not set.\n     */\n    getIntegrityForCacheKey(cacheKey) {\n        return this._cacheKeysToIntegrities.get(cacheKey);\n    }\n    /**\n     * This acts as a drop-in replacement for\n     * [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\n     * with the following differences:\n     *\n     * - It knows what the name of the precache is, and only checks in that cache.\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\n     * and it will automatically look up the correct cache key for the currently\n     * active revision of that URL.\n     *\n     * E.g., `matchPrecache('index.html')` will find the correct precached\n     * response for the currently active service worker, even if the actual cache\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\n     *\n     * @param {string|Request} request The key (without revisioning parameters)\n     * to look up in the precache.\n     * @return {Promise<Response|undefined>}\n     */\n    async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    /**\n     * Returns a function that looks up `url` in the precache (taking into\n     * account revision information), and returns the corresponding `Response`.\n     *\n     * @param {string} url The precached URL which will be used to lookup the\n     * `Response`.\n     * @return {workbox-routing~handlerCallback}\n     */\n    createHandlerBoundToURL(url) {\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (!cacheKey) {\n            throw new WorkboxError('non-precached-url', { url });\n        }\n        return (options) => {\n            options.request = new Request(url);\n            options.params = Object.assign({ cacheKey }, options.params);\n            return this.strategy.handle(options);\n        };\n    }\n}\nexport { PrecacheController };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * `PrecacheFallbackPlugin` allows you to specify an \"offline fallback\"\n * response to be used when a given strategy is unable to generate a response.\n *\n * It does this by intercepting the `handlerDidError` plugin callback\n * and returning a precached response, taking the expected revision parameter\n * into account automatically.\n *\n * Unless you explicitly pass in a `PrecacheController` instance to the\n * constructor, the default instance will be used. Generally speaking, most\n * developers will end up using the default.\n *\n * @memberof workbox-precaching\n */\nclass PrecacheFallbackPlugin {\n    /**\n     * Constructs a new PrecacheFallbackPlugin with the associated fallbackURL.\n     *\n     * @param {Object} config\n     * @param {string} config.fallbackURL A precached URL to use as the fallback\n     *     if the associated strategy can't generate a response.\n     * @param {PrecacheController} [config.precacheController] An optional\n     *     PrecacheController instance. If not provided, the default\n     *     PrecacheController will be used.\n     */\n    constructor({ fallbackURL, precacheController, }) {\n        /**\n         * @return {Promise<Response>} The precache response for the fallback URL.\n         *\n         * @private\n         */\n        this.handlerDidError = () => this._precacheController.matchPrecache(this._fallbackURL);\n        this._fallbackURL = fallbackURL;\n        this._precacheController =\n            precacheController || getOrCreatePrecacheController();\n    }\n}\nexport { PrecacheFallbackPlugin };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { Route } from 'workbox-routing/Route.js';\nimport { generateURLVariations } from './utils/generateURLVariations.js';\nimport './_version.js';\n/**\n * A subclass of {@link workbox-routing.Route} that takes a\n * {@link workbox-precaching.PrecacheController}\n * instance and uses it to match incoming requests and handle fetching\n * responses from the precache.\n *\n * @memberof workbox-precaching\n * @extends workbox-routing.Route\n */\nclass PrecacheRoute extends Route {\n    /**\n     * @param {PrecacheController} precacheController A `PrecacheController`\n     * instance used to both match requests and respond to fetch events.\n     * @param {Object} [options] Options to control how requests are matched\n     * against the list of precached URLs.\n     * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n     * check cache entries for a URLs ending with '/' to see if there is a hit when\n     * appending the `directoryIndex` value.\n     * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\n     * array of regex's to remove search params when looking for a cache match.\n     * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n     * check the cache for the URL with a `.html` added to the end of the end.\n     * @param {workbox-precaching~urlManipulation} [options.urlManipulation]\n     * This is a function that should take a URL and return an array of\n     * alternative URLs that should be checked for precache matches.\n     */\n    constructor(precacheController, options) {\n        const match = ({ request, }) => {\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n            for (const possibleURL of generateURLVariations(request.url, options)) {\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\n                if (cacheKey) {\n                    const integrity = precacheController.getIntegrityForCacheKey(cacheKey);\n                    return { cacheKey, integrity };\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Precaching did not find a match for ` + getFriendlyURL(request.url));\n            }\n            return;\n        };\n        super(match, precacheController.strategy);\n    }\n}\nexport { PrecacheRoute };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from 'workbox-strategies/Strategy.js';\nimport './_version.js';\n/**\n * A {@link workbox-strategies.Strategy} implementation\n * specifically designed to work with\n * {@link workbox-precaching.PrecacheController}\n * to both cache and fetch precached assets.\n *\n * Note: an instance of this class is created automatically when creating a\n * `PrecacheController`; it's generally not necessary to create this yourself.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-precaching\n */\nclass PrecacheStrategy extends Strategy {\n    /**\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] {@link https://developers.google.com/web/tools/workbox/guides/using-plugins|Plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\n     * of all fetch() requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * {@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions|CacheQueryOptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor(options = {}) {\n        options.cacheName = cacheNames.getPrecacheName(options.cacheName);\n        super(options);\n        this._fallbackToNetwork =\n            options.fallbackToNetwork === false ? false : true;\n        // Redirected responses cannot be used to satisfy a navigation request, so\n        // any redirected response must be \"copied\" rather than cloned, so the new\n        // response doesn't contain the `redirected` flag. See:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const response = await handler.cacheMatch(request);\n        if (response) {\n            return response;\n        }\n        // If this is an `install` event for an entry that isn't already cached,\n        // then populate the cache.\n        if (handler.event && handler.event.type === 'install') {\n            return await this._handleInstall(request, handler);\n        }\n        // Getting here means something went wrong. An entry that should have been\n        // precached wasn't found in the cache.\n        return await this._handleFetch(request, handler);\n    }\n    async _handleFetch(request, handler) {\n        let response;\n        const params = (handler.params || {});\n        // Fall back to the network if we're configured to do so.\n        if (this._fallbackToNetwork) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.warn(`The precached response for ` +\n                    `${getFriendlyURL(request.url)} in ${this.cacheName} was not ` +\n                    `found. Falling back to the network.`);\n            }\n            const integrityInManifest = params.integrity;\n            const integrityInRequest = request.integrity;\n            const noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest;\n            // Do not add integrity if the original request is no-cors\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            response = await handler.fetch(new Request(request, {\n                integrity: request.mode !== 'no-cors'\n                    ? integrityInRequest || integrityInManifest\n                    : undefined,\n            }));\n            // It's only \"safe\" to repair the cache if we're using SRI to guarantee\n            // that the response matches the precache manifest's expectations,\n            // and there's either a) no integrity property in the incoming request\n            // or b) there is an integrity, and it matches the precache manifest.\n            // See https://github.com/GoogleChrome/workbox/issues/2858\n            // Also if the original request users no-cors we don't use integrity.\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            if (integrityInManifest &&\n                noIntegrityConflict &&\n                request.mode !== 'no-cors') {\n                this._useDefaultCacheabilityPluginIfNeeded();\n                const wasCached = await handler.cachePut(request, response.clone());\n                if (process.env.NODE_ENV !== 'production') {\n                    if (wasCached) {\n                        logger.log(`A response for ${getFriendlyURL(request.url)} ` +\n                            `was used to \"repair\" the precache.`);\n                    }\n                }\n            }\n        }\n        else {\n            // This shouldn't normally happen, but there are edge cases:\n            // https://github.com/GoogleChrome/workbox/issues/1441\n            throw new WorkboxError('missing-precache-entry', {\n                cacheName: this.cacheName,\n                url: request.url,\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            const cacheKey = params.cacheKey || (await handler.getCacheKey(request, 'read'));\n            // Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Precaching is responding to: ` + getFriendlyURL(request.url));\n            logger.log(`Serving the precached url: ${getFriendlyURL(cacheKey instanceof Request ? cacheKey.url : cacheKey)}`);\n            logger.groupCollapsed(`View request details here.`);\n            logger.log(request);\n            logger.groupEnd();\n            logger.groupCollapsed(`View response details here.`);\n            logger.log(response);\n            logger.groupEnd();\n            logger.groupEnd();\n        }\n        return response;\n    }\n    async _handleInstall(request, handler) {\n        this._useDefaultCacheabilityPluginIfNeeded();\n        const response = await handler.fetch(request);\n        // Make sure we defer cachePut() until after we know the response\n        // should be cached; see https://github.com/GoogleChrome/workbox/issues/2737\n        const wasCached = await handler.cachePut(request, response.clone());\n        if (!wasCached) {\n            // Throwing here will lead to the `install` handler failing, which\n            // we want to do if *any* of the responses aren't safe to cache.\n            throw new WorkboxError('bad-precaching-response', {\n                url: request.url,\n                status: response.status,\n            });\n        }\n        return response;\n    }\n    /**\n     * This method is complex, as there a number of things to account for:\n     *\n     * The `plugins` array can be set at construction, and/or it might be added to\n     * to at any time before the strategy is used.\n     *\n     * At the time the strategy is used (i.e. during an `install` event), there\n     * needs to be at least one plugin that implements `cacheWillUpdate` in the\n     * array, other than `copyRedirectedCacheableResponsesPlugin`.\n     *\n     * - If this method is called and there are no suitable `cacheWillUpdate`\n     * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\n     *\n     * - If this method is called and there is exactly one `cacheWillUpdate`, then\n     * we don't have to do anything (this might be a previously added\n     * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\n     *\n     * - If this method is called and there is more than one `cacheWillUpdate`,\n     * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\n     * we need to remove it. (This situation is unlikely, but it could happen if\n     * the strategy is used multiple times, the first without a `cacheWillUpdate`,\n     * and then later on after manually adding a custom `cacheWillUpdate`.)\n     *\n     * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\n     *\n     * @private\n     */\n    _useDefaultCacheabilityPluginIfNeeded() {\n        let defaultPluginIndex = null;\n        let cacheWillUpdatePluginCount = 0;\n        for (const [index, plugin] of this.plugins.entries()) {\n            // Ignore the copy redirected plugin when determining what to do.\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\n                continue;\n            }\n            // Save the default plugin's index, in case it needs to be removed.\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\n                defaultPluginIndex = index;\n            }\n            if (plugin.cacheWillUpdate) {\n                cacheWillUpdatePluginCount++;\n            }\n        }\n        if (cacheWillUpdatePluginCount === 0) {\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\n        }\n        else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\n            // Only remove the default plugin; multiple custom plugins are allowed.\n            this.plugins.splice(defaultPluginIndex, 1);\n        }\n        // Nothing needs to be done if cacheWillUpdatePluginCount is 1\n    }\n}\nPrecacheStrategy.defaultPrecacheCacheabilityPlugin = {\n    async cacheWillUpdate({ response }) {\n        if (!response || response.status >= 400) {\n            return null;\n        }\n        return response;\n    },\n};\nPrecacheStrategy.copyRedirectedCacheableResponsesPlugin = {\n    async cacheWillUpdate({ response }) {\n        return response.redirected ? await copyResponse(response) : response;\n    },\n};\nexport { PrecacheStrategy };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:precaching:6.5.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Adds plugins to the precaching strategy.\n *\n * @param {Array<Object>} plugins\n *\n * @memberof workbox-precaching\n */\nfunction addPlugins(plugins) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.strategy.plugins.push(...plugins);\n}\nexport { addPlugins };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport { PrecacheRoute } from './PrecacheRoute.js';\nimport './_version.js';\n/**\n * Add a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * @param {Object} [options] See the {@link workbox-precaching.PrecacheRoute}\n * options.\n *\n * @memberof workbox-precaching\n */\nfunction addRoute(options) {\n    const precacheController = getOrCreatePrecacheController();\n    const precacheRoute = new PrecacheRoute(precacheController, options);\n    registerRoute(precacheRoute);\n}\nexport { addRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { deleteOutdatedCaches } from './utils/deleteOutdatedCaches.js';\nimport './_version.js';\n/**\n * Adds an `activate` event listener which will clean up incompatible\n * precaches that were created by older versions of Workbox.\n *\n * @memberof workbox-precaching\n */\nfunction cleanupOutdatedCaches() {\n    // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n    self.addEventListener('activate', ((event) => {\n        const cacheName = cacheNames.getPrecacheName();\n        event.waitUntil(deleteOutdatedCaches(cacheName).then((cachesDeleted) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (cachesDeleted.length > 0) {\n                    logger.log(`The following out-of-date precaches were cleaned up ` +\n                        `automatically:`, cachesDeleted);\n                }\n            }\n        }));\n    }));\n}\nexport { cleanupOutdatedCaches };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Helper function that calls\n * {@link PrecacheController#createHandlerBoundToURL} on the default\n * {@link PrecacheController} instance.\n *\n * If you are creating your own {@link PrecacheController}, then call the\n * {@link PrecacheController#createHandlerBoundToURL} on that instance,\n * instead of using this function.\n *\n * @param {string} url The precached URL which will be used to lookup the\n * `Response`.\n * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\n * response from the network if there's a precache miss.\n * @return {workbox-routing~handlerCallback}\n *\n * @memberof workbox-precaching\n */\nfunction createHandlerBoundToURL(url) {\n    const precacheController = getOrCreatePrecacheController();\n    return precacheController.createHandlerBoundToURL(url);\n}\nexport { createHandlerBoundToURL };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Takes in a URL, and returns the corresponding URL that could be used to\n * lookup the entry in the precache.\n *\n * If a relative URL is provided, the location of the service worker file will\n * be used as the base.\n *\n * For precached entries without revision information, the cache key will be the\n * same as the original URL.\n *\n * For precached entries with revision information, the cache key will be the\n * original URL with the addition of a query parameter used for keeping track of\n * the revision info.\n *\n * @param {string} url The URL whose cache key to look up.\n * @return {string} The cache key that corresponds to that URL.\n *\n * @memberof workbox-precaching\n */\nfunction getCacheKeyForURL(url) {\n    const precacheController = getOrCreatePrecacheController();\n    return precacheController.getCacheKeyForURL(url);\n}\nexport { getCacheKeyForURL };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Helper function that calls\n * {@link PrecacheController#matchPrecache} on the default\n * {@link PrecacheController} instance.\n *\n * If you are creating your own {@link PrecacheController}, then call\n * {@link PrecacheController#matchPrecache} on that instance,\n * instead of using this function.\n *\n * @param {string|Request} request The key (without revisioning parameters)\n * to look up in the precache.\n * @return {Promise<Response|undefined>}\n *\n * @memberof workbox-precaching\n */\nfunction matchPrecache(request) {\n    const precacheController = getOrCreatePrecacheController();\n    return precacheController.matchPrecache(request);\n}\nexport { matchPrecache };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * {@link workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * {@link workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n *\n * @memberof workbox-precaching\n */\nfunction precache(entries) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.precache(entries);\n}\nexport { precache };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { addRoute } from './addRoute.js';\nimport { precache } from './precache.js';\nimport './_version.js';\n/**\n * This method will add entries to the precache list and add a route to\n * respond to fetch events.\n *\n * This is a convenience method that will call\n * {@link workbox-precaching.precache} and\n * {@link workbox-precaching.addRoute} in a single call.\n *\n * @param {Array<Object|string>} entries Array of entries to precache.\n * @param {Object} [options] See the\n * {@link workbox-precaching.PrecacheRoute} options.\n *\n * @memberof workbox-precaching\n */\nfunction precacheAndRoute(entries, options) {\n    precache(entries);\n    addRoute(options);\n}\nexport { precacheAndRoute };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */\nclass PrecacheCacheKeyPlugin {\n    constructor({ precacheController }) {\n        this.cacheKeyWillBeUsed = async ({ request, params, }) => {\n            // Params is type any, can't change right now.\n            /* eslint-disable */\n            const cacheKey = (params === null || params === void 0 ? void 0 : params.cacheKey) ||\n                this._precacheController.getCacheKeyForURL(request.url);\n            /* eslint-enable */\n            return cacheKey\n                ? new Request(cacheKey, { headers: request.headers })\n                : request;\n        };\n        this._precacheController = precacheController;\n    }\n}\nexport { PrecacheCacheKeyPlugin };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\nclass PrecacheInstallReportPlugin {\n    constructor() {\n        this.updatedURLs = [];\n        this.notUpdatedURLs = [];\n        this.handlerWillStart = async ({ request, state, }) => {\n            // TODO: `state` should never be undefined...\n            if (state) {\n                state.originalRequest = request;\n            }\n        };\n        this.cachedResponseWillBeUsed = async ({ event, state, cachedResponse, }) => {\n            if (event.type === 'install') {\n                if (state &&\n                    state.originalRequest &&\n                    state.originalRequest instanceof Request) {\n                    // TODO: `state` should never be undefined...\n                    const url = state.originalRequest.url;\n                    if (cachedResponse) {\n                        this.notUpdatedURLs.push(url);\n                    }\n                    else {\n                        this.updatedURLs.push(url);\n                    }\n                }\n            }\n            return cachedResponse;\n        };\n    }\n}\nexport { PrecacheInstallReportPlugin };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport '../_version.js';\n// Name of the search parameter used to store revision info.\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object|string} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function createCacheKey(entry) {\n    if (!entry) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If a precache manifest entry is a string, it's assumed to be a versioned\n    // URL, like '/app.abcd1234.js'. Return as-is.\n    if (typeof entry === 'string') {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If there's just a URL and no revision, then it's also assumed to be a\n    // versioned URL.\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    // Otherwise, construct a properly versioned URL using the custom Workbox\n    // search parameter along with the revision info.\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href,\n    };\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst SUBSTRING_TO_FIND = '-precache-';\n/**\n * Cleans up incompatible precaches that were created by older versions of\n * Workbox, by a service worker registered under the current scope.\n *\n * This is meant to be called as part of the `activate` event.\n *\n * This should be safe to use as long as you don't include `substringToFind`\n * (defaulting to `-precache-`) in your non-precache cache names.\n *\n * @param {string} currentPrecacheName The cache name currently in use for\n * precaching. This cache won't be deleted.\n * @param {string} [substringToFind='-precache-'] Cache names which include this\n * substring will be deleted (excluding `currentPrecacheName`).\n * @return {Array<string>} A list of all the cache names that were deleted.\n *\n * @private\n * @memberof workbox-precaching\n */\nconst deleteOutdatedCaches = async (currentPrecacheName, substringToFind = SUBSTRING_TO_FIND) => {\n    const cacheNames = await self.caches.keys();\n    const cacheNamesToDelete = cacheNames.filter((cacheName) => {\n        return (cacheName.includes(substringToFind) &&\n            cacheName.includes(self.registration.scope) &&\n            cacheName !== currentPrecacheName);\n    });\n    await Promise.all(cacheNamesToDelete.map((cacheName) => self.caches.delete(cacheName)));\n    return cacheNamesToDelete;\n};\nexport { deleteOutdatedCaches };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { PrecacheController } from '../PrecacheController.js';\nimport '../_version.js';\nlet precacheController;\n/**\n * @return {PrecacheController}\n * @private\n */\nexport const getOrCreatePrecacheController = () => {\n    if (!precacheController) {\n        precacheController = new PrecacheController();\n    }\n    return precacheController;\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport '../_version.js';\n/**\n * @param {string} groupTitle\n * @param {Array<string>} deletedURLs\n *\n * @private\n */\nconst logGroup = (groupTitle, deletedURLs) => {\n    logger.groupCollapsed(groupTitle);\n    for (const url of deletedURLs) {\n        logger.log(url);\n    }\n    logger.groupEnd();\n};\n/**\n * @param {Array<string>} deletedURLs\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function printCleanupDetails(deletedURLs) {\n    const deletionCount = deletedURLs.length;\n    if (deletionCount > 0) {\n        logger.groupCollapsed(`During precaching cleanup, ` +\n            `${deletionCount} cached ` +\n            `request${deletionCount === 1 ? ' was' : 's were'} deleted.`);\n        logGroup('Deleted Cache Requests', deletedURLs);\n        logger.groupEnd();\n    }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport '../_version.js';\n/**\n * @param {string} groupTitle\n * @param {Array<string>} urls\n *\n * @private\n */\nfunction _nestedGroup(groupTitle, urls) {\n    if (urls.length === 0) {\n        return;\n    }\n    logger.groupCollapsed(groupTitle);\n    for (const url of urls) {\n        logger.log(url);\n    }\n    logger.groupEnd();\n}\n/**\n * @param {Array<string>} urlsToPrecache\n * @param {Array<string>} urlsAlreadyPrecached\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function printInstallDetails(urlsToPrecache, urlsAlreadyPrecached) {\n    const precachedCount = urlsToPrecache.length;\n    const alreadyPrecachedCount = urlsAlreadyPrecached.length;\n    if (precachedCount || alreadyPrecachedCount) {\n        let message = `Precaching ${precachedCount} file${precachedCount === 1 ? '' : 's'}.`;\n        if (alreadyPrecachedCount > 0) {\n            message +=\n                ` ${alreadyPrecachedCount} ` +\n                    `file${alreadyPrecachedCount === 1 ? ' is' : 's are'} already cached.`;\n        }\n        logger.groupCollapsed(message);\n        _nestedGroup(`View newly precached URLs.`, urlsToPrecache);\n        _nestedGroup(`View previously precached URLs.`, urlsAlreadyPrecached);\n        logger.groupEnd();\n    }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\n    // Convert the iterable into an array at the start of the loop to make sure\n    // deletion doesn't mess up iteration.\n    for (const paramName of [...urlObject.searchParams.keys()]) {\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\n            urlObject.searchParams.delete(paramName);\n        }\n    }\n    return urlObject;\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * {@link workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * {@link workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if (url.origin !== location.origin && result.index !== 0) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp.toString()}' only partially matched ` +\n                        `against the cross-origin URL '${url.toString()}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n    /**\n     *\n     * @param {workbox-routing-handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response\n     */\n    setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    }\n}\nexport { Route };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod } from './utils/constants.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a `FetchEvent` using one or more\n * {@link workbox-routing.Route}, responding with a `Response` if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n     * @return {Map<string, Array<workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            // event.data is type 'any'\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request, event });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    void requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event, }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url,\n        });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([`Found a route to handle this request:`, route]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`,\n                        params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise &&\n            (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err) => {\n                // If there's a route catch handler, process that first\n                if (catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({ url, request, event, params });\n                    }\n                    catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        }\n                    }\n                }\n                if (this._catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({ url, request, event });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, sameOrigin, request, event, }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            // route.match returns type any, not possible to change right now.\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const matchResult = route.match({ url, sameOrigin, request, event });\n            if (matchResult) {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Warn developers that using an async matchCallback is almost always\n                    // not the right thing to do.\n                    if (matchResult instanceof Promise) {\n                        logger.warn(`While routing ${getFriendlyURL(url)}, an async ` +\n                            `matchCallback function was used. Please convert the ` +\n                            `following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if (matchResult.constructor === Object && // eslint-disable-line\n                    Object.keys(matchResult).length === 0) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:6.5.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call {@link workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|workbox-routing.Route~matchCallback|workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {workbox-routing.Route} The generated `Route`.\n *\n * @memberof workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http')\n                ? captureUrl.pathname\n                : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if (new RegExp(`${wildcards}`).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (url.pathname === captureUrl.pathname &&\n                    url.origin !== captureUrl.origin) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url.toString()}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { StrategyHandler } from './StrategyHandler.js';\nimport './_version.js';\n/**\n * An abstract base class that all other strategy classes must extend from:\n *\n * @memberof workbox-strategies\n */\nclass Strategy {\n    /**\n     * Creates a new instance of the strategy and sets all documented option\n     * properties as public instance properties.\n     *\n     * Note: if a custom strategy class extends the base Strategy class and does\n     * not need more than these properties, it does not need to define its own\n     * constructor.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     */\n    constructor(options = {}) {\n        /**\n         * Cache name to store and retrieve\n         * requests. Defaults to the cache names provided by\n         * {@link workbox-core.cacheNames}.\n         *\n         * @type {string}\n         */\n        this.cacheName = cacheNames.getRuntimeName(options.cacheName);\n        /**\n         * The list\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n         * used by this strategy.\n         *\n         * @type {Array<Object>}\n         */\n        this.plugins = options.plugins || [];\n        /**\n         * Values passed along to the\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n         * of all fetch() requests made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.fetchOptions = options.fetchOptions;\n        /**\n         * The\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.matchOptions = options.matchOptions;\n    }\n    /**\n     * Perform a request strategy and returns a `Promise` that will resolve with\n     * a `Response`, invoking all relevant plugin callbacks.\n     *\n     * When a strategy instance is registered with a Workbox\n     * {@link workbox-routing.Route}, this method is automatically\n     * called when the route matches.\n     *\n     * Alternatively, this method can be used in a standalone `FetchEvent`\n     * listener by passing it to `event.respondWith()`.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     */\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    /**\n     * Similar to {@link workbox-strategies.Strategy~handle}, but\n     * instead of just returning a `Promise` that resolves to a `Response` it\n     * it will return an tuple of `[response, done]` promises, where the former\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\n     * Promise that will resolve once any promises that were added to\n     * `event.waitUntil()` as part of performing the strategy have completed.\n     *\n     * You can await the `done` promise to ensure any extra work performed by\n     * the strategy (usually caching responses) completes successfully.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     * @return {Array<Promise>} A tuple of [response, done]\n     *     promises that can be used to determine when the response resolves as\n     *     well as when the handler has completed all its work.\n     */\n    handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request,\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === 'string'\n            ? new Request(options.request)\n            : options.request;\n        const params = 'params' in options ? options.params : undefined;\n        const handler = new StrategyHandler(this, { event, request, params });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [responseDone, handlerDone];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks('handlerWillStart', { event, request });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (!response || response.type === 'error') {\n                throw new WorkboxError('no-response', { url: request.url });\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks('handlerDidError')) {\n                    response = await callback({ error, event, request });\n                    if (response) {\n                        break;\n                    }\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            else if (process.env.NODE_ENV !== 'production') {\n                logger.log(`While responding to '${getFriendlyURL(request.url)}', ` +\n                    `an ${error instanceof Error ? error.toString() : ''} error occurred. Using a fallback response provided by ` +\n                    `a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks('handlerWillRespond')) {\n            response = await callback({ event, request, response });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response;\n        let error;\n        try {\n            response = await responseDone;\n        }\n        catch (error) {\n            // Ignore errors, as response errors should be caught via the `response`\n            // promise above. The `done` promise will only throw for errors in\n            // promises passed to `handler.waitUntil()`.\n        }\n        try {\n            await handler.runCallbacks('handlerDidRespond', {\n                event,\n                request,\n                response,\n            });\n            await handler.doneWaiting();\n        }\n        catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            }\n        }\n        await handler.runCallbacks('handlerDidComplete', {\n            event,\n            request,\n            response,\n            error: error,\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\nexport { Strategy };\n/**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage the {@link workbox-strategies.StrategyHandler}\n * arg to perform all fetching and cache logic, which will ensure all relevant\n * cache, cache options, fetch options and plugins are used (per the current\n * strategy instance).\n *\n * @name _handle\n * @instance\n * @abstract\n * @function\n * @param {Request} request\n * @param {workbox-strategies.StrategyHandler} handler\n * @return {Promise<Response>}\n *\n * @memberof workbox-strategies.Strategy\n */\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return typeof input === 'string' ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * {@link workbox-strategies.Strategy~handle} or\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params] The return value from the\n     *     {@link workbox-routing~matchCallback} (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {};\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * {@link workbox-routing~matchCallback} returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = (await event.preloadResponse);\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail')\n            ? request.clone()\n            : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event });\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                throw new WorkboxError('plugin-error-request-will-fetch', {\n                    thrownErrorMessage: err.message,\n                });\n            }\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\n                    `status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n            }\n            return fetchResponse;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cachedResponseWillByUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), { cacheName });\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            }\n            else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse =\n                (await callback({\n                    cacheName,\n                    matchOptions,\n                    cachedResponse,\n                    request: effectiveRequest,\n                    event: this.event,\n                })) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                });\n            }\n            // See https://github.com/GoogleChrome/workbox/issues/2818\n            const vary = response.headers.get('Vary');\n            if (vary) {\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} ` +\n                    `has a 'Vary: ${vary}' header. ` +\n                    `Consider setting the {ignoreVary: true} option on your strategy ` +\n                    `to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\n                    `will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback\n            ? await cacheMatchIgnoreParams(\n            // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n            // feature. Consider into ways to only add this behavior if using\n            // precaching.\n            cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions)\n            : null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === 'QuotaExceededError') {\n                    await executeQuotaErrorCallbacks();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            });\n        }\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n    async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    // params has a type any can't change right now.\n                    params: this.params, // eslint-disable-line\n                }));\n            }\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = Object.assign(Object.assign({}, param), { state });\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * {@link workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * {@link workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while ((promise = this._extendLifetimePromises.shift())) {\n            await promise;\n        }\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache =\n                (await callback({\n                    request: this.request,\n                    response: responseToCache,\n                    event: this.event,\n                })) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        }\n                        else {\n                            logger.debug(`The response for '${this.request.url}' ` +\n                                `returned a status code of '${response.status}' and won't ` +\n                                `be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\nexport { StrategyHandler };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:6.5.4'] && _();\n}\ncatch (e) { }\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst workbox_precaching_1 = require(\"workbox-precaching\");\nconsole.log('Service Worker script loaded');\nconst CACHE_NAME = 'my-pwa-cache';\nconst urlsToCache = [\n    '/',\n    './index.html',\n    //   './index.css',\n    //   './App.css',\n    //   './types/api-types.md',\n    //   './types/parking-types.md',\n];\n(0, workbox_precaching_1.precacheAndRoute)(self.__WB_MANIFEST || []);\nself.addEventListener('install', (event) => {\n    event.waitUntil(caches.open(CACHE_NAME)\n        .then((cache) => {\n        return cache.addAll(urlsToCache);\n    }));\n});\nself.addEventListener('fetch', (event) => {\n    event.respondWith(caches.match(event.request)\n        .then((cachedResponse) => {\n        if (cachedResponse) {\n            return cachedResponse;\n        }\n        return fetch(event.request)\n            .then((networkResponse) => {\n            return caches.open(CACHE_NAME)\n                .then((cache) => {\n                cache.put(event.request, networkResponse.clone());\n                return networkResponse;\n            });\n        });\n    }));\n});\n// function fetchData() {\n//   return caches.match('/api/data').then((cachedData) => {\n//     if (cachedData) {\n//       return cachedData.json();\n//     } else {\n//       return fetch('/api/data')\n//         .then(response => response.json())\n//         .then(data => {\n//           caches.open('depark-cache').then((cache) => {\n//             cache.put('/api/data', new Response(JSON.stringify(data)));\n//           });\n//           return data;\n//         })\n//         .catch(() => {\n//           return Promise.reject('Unable to fetch data from the network or cache.');\n//         });\n//     }\n//   });\n// }\nself.addEventListener('activate', (event) => {\n    const cacheWhitelist = [CACHE_NAME];\n    event.waitUntil(caches.keys().then((cacheNames) => {\n        return Promise.all(cacheNames.map((cacheName) => {\n            if (!cacheWhitelist.includes(cacheName)) {\n                return caches.delete(cacheName);\n            }\n        }));\n    }).then(() => {\n        return self.clients.claim();\n    }));\n});\n"],"names":["Deferred","constructor","this","promise","Promise","resolve","reject","WorkboxError","Error","errorCode","details","super","messageGenerator","name","finalAssertExports","hasMethod","object","expectedMethod","isArray","value","Array","isInstance","expectedClass","isOneOf","validValues","includes","JSON","stringify","isType","expectedType","isArrayOfClass","error","item","stripParams","fullURL","ignoreParams","strippedURL","URL","param","searchParams","delete","href","async","cacheMatchIgnoreParams","cache","request","matchOptions","strippedRequestURL","url","match","keysOptions","Object","assign","ignoreSearch","cacheKeys","keys","cacheKey","_cacheNameDetails","googleAnalytics","precache","prefix","runtime","suffix","registration","scope","_createCacheName","cacheName","filter","length","join","cacheNames","updateDetails","fn","key","eachCacheNameDetail","getGoogleAnalyticsName","userCacheName","getPrecacheName","getPrefix","getRuntimeName","getSuffix","supportStatus","canConstructResponseFromBodyStream","undefined","testResponse","Response","body","executeQuotaErrorCallbacks","logger","log","quotaErrorCallbacks","size","callback","getFriendlyURL","String","location","replace","RegExp","origin","globalThis","self","__WB_DISABLE_DEV_LOGS","inGroup","methodToColorMap","debug","warn","groupCollapsed","groupEnd","print","method","args","test","navigator","userAgent","console","logPrefix","api","loggerMethods","timeout","ms","setTimeout","waitUntil","event","asyncFn","returnPromise","_","e","copyResponse","response","modifier","clonedResponse","clone","responseInit","headers","Headers","status","statusText","modifiedResponseInit","blob","code","message","messages","paramName","validValueDescription","moduleName","className","funcName","expectedClassName","isReturnValueProblem","classNameStr","entry","firstEntry","secondEntry","thrownErrorMessage","cacheNameId","methodName","normalizedRangeHeader","start","end","type","Set","PrecacheController","plugins","fallbackToNetwork","_urlsToCacheKeys","Map","_urlsToCacheModes","_cacheKeysToIntegrities","_strategy","PrecacheStrategy","PrecacheCacheKeyPlugin","precacheController","install","bind","activate","strategy","entries","addToCacheList","_installAndActiveListenersAdded","addEventListener","assert","urlsToWarnAbout","push","revision","createCacheKey","cacheMode","has","get","integrity","set","warningMessage","installReportPlugin","PrecacheInstallReportPlugin","Request","credentials","all","handleAll","params","updatedURLs","notUpdatedURLs","printInstallDetails","caches","open","currentlyCachedRequests","expectedCacheKeys","values","deletedURLs","printCleanupDetails","getURLsToCacheKeys","getCachedURLs","getCacheKeyForURL","urlObject","getIntegrityForCacheKey","matchPrecache","createHandlerBoundToURL","options","handle","PrecacheFallbackPlugin","fallbackURL","handlerDidError","_precacheController","_fallbackURL","getOrCreatePrecacheController","PrecacheRoute","Route","urlsToCacheKeys","possibleURL","generateURLVariations","Strategy","_fallbackToNetwork","copyRedirectedCacheableResponsesPlugin","_handle","handler","cacheMatch","_handleInstall","_handleFetch","integrityInManifest","integrityInRequest","noIntegrityConflict","fetch","mode","_useDefaultCacheabilityPluginIfNeeded","cachePut","getCacheKey","defaultPluginIndex","cacheWillUpdatePluginCount","index","plugin","defaultPrecacheCacheabilityPlugin","cacheWillUpdate","splice","redirected","addPlugins","addRoute","precacheRoute","registerRoute","cleanupOutdatedCaches","deleteOutdatedCaches","then","cachesDeleted","precacheAndRoute","cacheKeyWillBeUsed","handlerWillStart","state","originalRequest","cachedResponseWillBeUsed","cachedResponse","REVISION_SEARCH_PARAM","cacheKeyURL","originalURL","currentPrecacheName","substringToFind","cacheNamesToDelete","map","ignoreURLParametersMatching","directoryIndex","cleanURLs","urlManipulation","hash","urlWithoutIgnoredParams","removeIgnoredSearchParams","pathname","endsWith","directoryURL","cleanURL","additionalURLs","urlToAttempt","logGroup","groupTitle","deletionCount","_nestedGroup","urls","urlsToPrecache","urlsAlreadyPrecached","precachedCount","alreadyPrecachedCount","some","regExp","RegExpRoute","result","exec","slice","toString","defaultMethod","validMethods","normalizeHandler","setCatchHandler","catchHandler","Router","_routes","_defaultHandlerMap","routes","addFetchListener","responsePromise","handleRequest","respondWith","addCacheListener","data","payload","urlsToCache","requestPromises","ports","postMessage","protocol","startsWith","sameOrigin","route","findMatchingRoute","debugMessages","forEach","msg","err","_catchHandler","catch","catchErr","matchResult","setDefaultHandler","unregisterRoute","routeIndex","indexOf","capture","captureUrl","valueToCheck","wildcards","matchCallback","getOrCreateDefaultRouter","defaultRouter","fetchOptions","responseDone","FetchEvent","StrategyHandler","_getResponse","_awaitComplete","runCallbacks","iterateCallbacks","doneWaiting","waitUntilError","destroy","toRequest","input","_cacheKeys","ExtendableEvent","_handlerDeferred","_extendLifetimePromises","_plugins","_pluginStateMap","preloadResponse","possiblePreloadResponse","hasCallback","cb","pluginFilteredRequest","fetchResponse","fetchAndCachePut","responseClone","effectiveRequest","multiMatchOptions","vary","responseToCache","_ensureResponseSafeToCache","hasCacheUpdateCallback","oldResponse","put","newResponse","statefulCallback","statefulParam","shift","pluginsUsed","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","workbox_precaching_1","CACHE_NAME","__WB_MANIFEST","addAll","networkResponse","cacheWhitelist","clients","claim"],"sourceRoot":""}
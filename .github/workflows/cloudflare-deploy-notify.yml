name: Cloudflare Pages Deploy Notification

on:
  push:
    branches: [prod-fix, prod-frontend, test-cf-notifications]

jobs:
  notify-deployment:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Wait for deployment and get status
        id: deployment-status
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CF_PROJECT_NAME: ${{ secrets.CF_PROJECT_NAME }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          set -e
          
          # Wait up to 2 minutes for deployment to appear
          deployment_id=""
          for i in {1..24}; do
            deployment_id=$(curl -s -H "Authorization: Bearer $CF_API_TOKEN" \
              "https://api.cloudflare.com/client/v4/accounts/$CF_ACCOUNT_ID/pages/projects/$CF_PROJECT_NAME/deployments" \
              | jq -r --arg sha "$GITHUB_SHA" '.result[] | select(.deployment_trigger.metadata.commit_hash == $sha) | .id')
          
            if [ -n "$deployment_id" ] && [ "$deployment_id" != "null" ]; then
              break
            fi
            sleep 5
          done
          
          if [ -z "$deployment_id" ] || [ "$deployment_id" = "null" ]; then
            echo "status=timeout" >> $GITHUB_OUTPUT
            echo "message=Deployment not found within 2 minutes" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Wait for deployment to complete (max 10 minutes)
          for i in {1..60}; do
            deployment_info=$(curl -s -H "Authorization: Bearer $CF_API_TOKEN" \
              "https://api.cloudflare.com/client/v4/accounts/$CF_ACCOUNT_ID/pages/projects/$CF_PROJECT_NAME/deployments/$deployment_id")
          
            status=$(echo "$deployment_info" | jq -r '.result.latest_stage.status')
            failed_stage=$(echo "$deployment_info" | jq -r '.result.stages[] | select(.status == "failure") | .name' | head -1)
          
            # Check if any stage failed
            if [ -n "$failed_stage" ] || [ "$status" = "failure" ]; then
              echo "status=failure" >> $GITHUB_OUTPUT
              echo "deployment_id=$deployment_id" >> $GITHUB_OUTPUT
          
              # Get build log for failures
              full_log=$(curl -s -H "Authorization: Bearer $CF_API_TOKEN" \
                "https://api.cloudflare.com/client/v4/accounts/$CF_ACCOUNT_ID/pages/projects/$CF_PROJECT_NAME/deployments/$deployment_id/history/logs" \
                | jq -r '.result.data[].line')
          
              # Extract error section, fallback to last 25 lines if grep fails
              error_log=$(echo "$full_log" | grep -A 20 "Failed to compile\|error code\|command failed" | head -25 || echo "$full_log" | tail -25)
          
              # Clean for JSON
              log_escaped=$(echo "$error_log" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
              echo "log=$log_escaped" >> $GITHUB_OUTPUT
              exit 0
            elif [ "$status" = "success" ]; then
              echo "status=success" >> $GITHUB_OUTPUT
              echo "deployment_id=$deployment_id" >> $GITHUB_OUTPUT
              exit 0
            fi
          
            sleep 10
          done
          
          # Timeout after 10 minutes
          echo "status=timeout" >> $GITHUB_OUTPUT
          echo "message=Deployment took longer than 10 minutes" >> $GITHUB_OUTPUT

      - name: Send success notification to Slack
        if: steps.deployment-status.outputs.status == 'success'
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"blocks\": [
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"✅ *Cloudflare Pages Deploy Success*\n*Branch:* ${{ github.ref_name }}\n*Commit:* <${{ github.event.head_commit.url }}|${{ github.event.head_commit.message }}>\n*Deployment:* <https://dash.cloudflare.com/${{ secrets.CF_ACCOUNT_ID }}/pages/view/${{ secrets.CF_PROJECT_NAME }}/${{ steps.deployment-status.outputs.deployment_id }}|View Details>\"
                }
              }
            ]
          }" \
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send failure notification to Slack
        if: steps.deployment-status.outputs.status == 'failure'
        run: |
          # Extract only the key error information
          raw_log='${{ steps.deployment-status.outputs.log }}'
          
          # Get just the ESLint errors and npm error summary
          eslint_errors=$(echo "$raw_log" | grep -A 10 "\[eslint\]" | head -10 || echo "")
          npm_error=$(echo "$raw_log" | grep "npm error.*failed with error" || echo "Build failed")
          
          # Create clean, readable error message
          if [ -n "$eslint_errors" ]; then
            clean_error="ESLint Errors:
          $eslint_errors
          
          $npm_error"
          else
            clean_error="$npm_error"
          fi
          
          # Write the JSON to a file to avoid shell escaping issues
          cat > payload.json << 'EOF'
          {
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "❌ *Cloudflare Pages Deploy Failed*\n*Branch:* BRANCH_NAME\n*Commit:* <COMMIT_URL|COMMIT_MESSAGE>"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Build Error:*\n```\nERROR_TEXT\n```\n\n<LOGS_URL|View Full Logs>"
                }
              }
            ]
          }
          EOF
          
          # Replace placeholders using simple string replacement
          sed -i "s/BRANCH_NAME/${{ github.ref_name }}/" payload.json
          sed -i "s|COMMIT_URL|${{ github.event.head_commit.url }}|" payload.json
          sed -i "s/COMMIT_MESSAGE/${{ github.event.head_commit.message }}/" payload.json
          sed -i "s|LOGS_URL|https://dash.cloudflare.com/${{ secrets.CF_ACCOUNT_ID }}/pages/view/${{ secrets.CF_PROJECT_NAME }}/${{ steps.deployment-status.outputs.deployment_id }}|" payload.json
          
          # Replace error text (this is trickier due to newlines)
          python3 -c "
          import json
          with open('payload.json', 'r') as f:
            data = json.load(f)
          data['blocks'][1]['text']['text'] = data['blocks'][1]['text']['text'].replace('ERROR_TEXT', '''$clean_error''')
          with open('payload.json', 'w') as f:
            json.dump(data, f)
          "
          
          curl -X POST -H 'Content-type: application/json' \
          --data @payload.json \
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send timeout notification to Slack
        if: steps.deployment-status.outputs.status == 'timeout'
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"blocks\": [
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"⏰ *Cloudflare Pages Deploy Timeout*\n*Branch:* ${{ github.ref_name }}\n*Commit:* <${{ github.event.head_commit.url}}|${{ github.event.head_commit.message }}>\n*Issue:* ${{ steps.deployment-status.outputs.message }}\"
                }
              }
            ]
          }" \
          ${{ secrets.SLACK_WEBHOOK_URL }}